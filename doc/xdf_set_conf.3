.\"Copyright 2010 (c) EPFL
.TH XDF_SET_CONF 3 2010 "EPFL" "xdffileio library manual"
.SH NAME
xdf_set_conf, xdf_get_conf - set or get the configuration of xDF file
.SH SYNOPSIS
.LP
.B #include <xdfio.h>
.sp
.BI "int xdf_set_conf(struct xdf* " xdf ", enum xdffield " field ", ...);"
.br
.BI "int xdf_get_conf(const struct xdf* " xdf ", enum xdffield " field ", ...);"
.br
.SH DESCRIPTION
.LP
\fBxdf_set_conf\fP() sets the configuration (usually one of the field file
header) of a xDF file referenced by \fIxdf\fP according to the variable list
of arguments. This list is composed of successive couple grouping one
variable of type enum xdffield defining the feature to be set and a value
whose type depends on the previous field type. The list \fBmust finish\fP by
\fBXDF_NOF\fP.
.LP
\fBxdf_get_conf\fP() gets the configuration of the channel referenced by
\fIxdf\fP according to the variable list of argument. The variable list is
the same list terminated by \fBXDF_NOF\fP as for
\fBxdf_set_conf\fP() excepting that the second part of the couple is not
that value but a \fBpointer to the value\fP.
.LP
Both functions process the argument list \fIfrom left to right\fP. This
means that if a particular field request provokes an error, none of the
field requests on its right will be processed. The order of processing is
also important for field requests that influences the value of other fields
(like \fBXDF_F_REC_NSAMPLE\fP or \fBXDF_F_SAMPLING_FREQ\fP).
.LP
The functions accepts two types of field value. The first one are
file configuration field (XDF_F_*) which set different aspects of the
general configuration of the file. The second type are the channel
configuration fields (XDF_CF_*). When used in \fBxdf_set_conf\fP(), those
fields set the default values that will be used for the creation of the next
channel (see \fBxdf_add_channel\fP(3)). The list of channel configuration
fields and their meaning are specified in the documentation of
\fBxdf_set_chconf\fP(3).
.LP
If the file is opened for writing, each field is initialized to sensible or
non-informative values in case of optional field or incorrect values in the
case of "must be set" field (only \fBXDF_F_REC_NSAMPLE\fP or
\fBXDF_F_SAMPLING_FREQ\fB). The default value are specified in squared
bracked in the list.
.LP
Here is the list of file configuration field value. The type of value
expected is provided in the parenthesis (the expected type of the value for
\fBxdf_set_conf\fP(), or a pointer to this type for \fBxdf_get_conf\fP()).
If a list of data formats is specified in curl brackets, it means that the
field is supported only in those formats (no list means that all formats
support the field):
.TP
\fBXDF_F_REC_DURATION\fP (double) [1]
Specify the duration of one record. The value should be positive.
.TP
\fBXDF_F_REC_NSAMPLE\fP (int) [0]
Specify the number of time points contained in each record. The value should
be positive. Setting the number of sample per record modifies the sampling
frequency (field \fBXDF_SAMPLING_FREQ\fP).
.TP
\fBXDF_F_SAMPLING_FREQ\fP (int) [0]
Get or set the sampling frequency of the recording. Setting the sampling
frequency modifies the number of sample per record (field
\fBXDF_F_REC_NSAMPLE\fP).
.TP
\fBXDF_F_NCHANNEL\fP (int)  (get function only)
Get the number of channel in the file.
.TP
\fBXDF_F_NEVTTYPE\fP (int)  (get function only)
Get the number of different event types.
.TP
\fBXDF_F_NEVENT\fP (int)  (get function only)
Get the number of events.
.TP
\fBXDF_F_NREC\fP (int)  (get function only)
Get the number of record in the file.
.TP
\fBXDF_F_FILEFMT\fP (int)  (get function only)
Get the file format type (one of the value defined by the enumeration
xdffiletype other than \fBXDF_ANY\fP)
.TP
\fBXDF_F_RECTIME\fP (double) [current time] {EDF BDF GDF}
Date and time of recording. It is expressed as number of seconds elapsed
since the Epoch, 1970-01-01 00:00:00 +0000 (UTC). This number is the
conversion to \fBdouble\fP of the value returned by the function
\fBtime\fP(3) of the standard C library. On file creation, this field is
initialized to the current time.
.TP
\fBXDF_F_SUBJ_DESC\fP (const char*) [""] {EDF BDF GDF}
Specify the string describing the subject.
.TP
\fBXDF_F_SESS_DESC\fP (const char*) [""] {EDF BDF GDF}
Specify the string describing the session of recording.
.TP
\fBXDF_F_ADDICTION\fP (unsigned int) [0] {GDF}
.TP
\fBXDF_F_BIRTHDAY\fP (double) [0] {GDF}
Birthday of the patient using the same format as specified for field
\fBXDF_F_RECTIME\fP.
.TP
\fBXDF_F_HEIGHT\fP (double) [0] {GDF}
Height of the subject in centimeters.
.TP
\fBXDF_F_WEIGHT\fP (double) [0] {GDF}
Weight of the subject in kilograms.
.TP
\fBXDF_F_GENDER\fP (unsigned int) [0] {GDF}
Sex of the subject. Use \fB1\fP for male, \fB2\fP for female and \fB0\fP if
unknown.
.TP
\fBXDF_F_HANDNESS\fP (unsigned int) [0] {GDF}
Handness of the subject. Use \fB0\fP if unknown, \fB1\fP if right, \fB2\fP
if left and \fB3\fP if ambidextrious.
.TP
\fBXDF_F_VISUAL_IMP\fP (unsigned int) [0] {GDF}
Visual impairment. Use \fB0\fP if unknown, \fB1\fP if no impairment, \fB2\fP
if impaired and \fB3\fP if impaired but corrected.
.TP
\fBXDF_F_HEART_IMP\fP (unsigned int) [0] {GDF}
Heart impairment. Use \fB0\fP if unknown, \fB1\fP if no impairment, \fB2\fP
if impaired and \fB3\fP if the subject wear a pacemaker.
.TP
\fBXDF_F_LOCATION\fP (double[3]) [0,0,0] {GDF}
Location of the recording. The first 2 component specify the latitude and
longitude in degrees, the third specifies the altitude in meters.
.TP
\fBXDF_F_ICD_CLASS\fP (char[6]) [0x000000000000] {GDF}
Patient classification according to the International Statistical
Classification of Diseases and Related Health Problems (ICD).
.TP
\fBXDF_F_HEADSIZE\fP (double[3]) [0,0,0] {GDF}
Size of the subject's head (circumference, distance nasion â€“ inion, left to 
right mastoid) expressed in millimeters.
.TP
\fBXDF_F_REF_POS\fP (double[3]) [0,0,0] {GDF}
X, Y, Z coordinates of the reference electrode.
.TP
\fBXDF_F_GND_POS\fP (double[3]) [0,0,0] {GDF}
X, Y, Z coordinates of the ground electrode.
.SH "RETURN VALUE"
.LP
The two functions returns 0 in case of success. Otherwise \-1 is returned and
\fIerrno\fP is set appropriately.
.SH ERROR
.TP 7
.B EINVAL
\fIxdf\fP is NULL or \fIfield\fP is not a proper value of the enumeration
xdffield accepted by the function (for example \fBXDF_F_NCHANNEL\fP and 
\fBxdf_set_conf\fP() )
.TP 7
.B EPERM
The request submitted to \fBxdf_set_conf\fP() is not allowed for this type
of xDF file or is not supported with the mode \fBXDF_READ\fP.
.SH EXAMPLES
.LP
Example of usage of \fBxdf_set_conf\fP() and \fBxdf_get_conf\fP():
.sp
.RS
.nf
\fB
/* Assume xdfr and xdfw reference 2 XDF files opened respectively
 * for reading and for writing */
const char *subjstr, *sessstr;

xdf_get_conf(xdfr, XDF_F_SUBJ_DESC, &subjstr,
                   XDF_F_SESS_DESC, &sessstr,
                   XDF_NOF);

printf("subject: %s\\nrecording: %s\\n", subjstr, sessstr);

xdf_set_conf(xdfw, XDF_F_SUBJ_DESC, subjstr,
                   XDF_F_SESS_DESC, sessstr,
                   XDF_NOF);
\fP
.fi
.RE
.SH "SEE ALSO"
.BR xdf_copy_conf (3),
.BR xdf_set_chconf (3),
.BR xdf_add_channel (3)



